// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createCidade = `-- name: CreateCidade :exec
INSERT INTO cidades (id, descricao, estado_id, cod_ibge) VALUES (?, ?, ?, ?)
`

type CreateCidadeParams struct {
	ID        string
	Descricao string
	EstadoID  string
	CodIbge   string
}

func (q *Queries) CreateCidade(ctx context.Context, arg CreateCidadeParams) error {
	_, err := q.db.ExecContext(ctx, createCidade,
		arg.ID,
		arg.Descricao,
		arg.EstadoID,
		arg.CodIbge,
	)
	return err
}

const createCliente = `-- name: CreateCliente :exec
INSERT INTO clientes (id, codigo_mc, empresa_id, nome, cep, cidade_id, endereco, numero, complemento) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateClienteParams struct {
	ID          string
	CodigoMc    int64
	EmpresaID   string
	Nome        string
	Cep         sql.NullString
	CidadeID    sql.NullString
	Endereco    sql.NullString
	Numero      sql.NullString
	Complemento sql.NullString
}

func (q *Queries) CreateCliente(ctx context.Context, arg CreateClienteParams) error {
	_, err := q.db.ExecContext(ctx, createCliente,
		arg.ID,
		arg.CodigoMc,
		arg.EmpresaID,
		arg.Nome,
		arg.Cep,
		arg.CidadeID,
		arg.Endereco,
		arg.Numero,
		arg.Complemento,
	)
	return err
}

const createEmpresa = `-- name: CreateEmpresa :exec
INSERT INTO empresas (id, descricao, cnpj, chave_registro) VALUES (?, ?, ?, ?)
`

type CreateEmpresaParams struct {
	ID            string
	Descricao     string
	Cnpj          sql.NullString
	ChaveRegistro sql.NullString
}

func (q *Queries) CreateEmpresa(ctx context.Context, arg CreateEmpresaParams) error {
	_, err := q.db.ExecContext(ctx, createEmpresa,
		arg.ID,
		arg.Descricao,
		arg.Cnpj,
		arg.ChaveRegistro,
	)
	return err
}

const createEstado = `-- name: CreateEstado :exec
INSERT INTO estados (id, descricao, uf, cod_ibge) VALUES (?, ?, ?, ?)
`

type CreateEstadoParams struct {
	ID        string
	Descricao string
	Uf        string
	CodIbge   int32
}

func (q *Queries) CreateEstado(ctx context.Context, arg CreateEstadoParams) error {
	_, err := q.db.ExecContext(ctx, createEstado,
		arg.ID,
		arg.Descricao,
		arg.Uf,
		arg.CodIbge,
	)
	return err
}

const createItemVenda = `-- name: CreateItemVenda :exec
INSERT INTO itens_venda (id, empresa_id, venda_id, produto_id, quantidade, valor, total) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateItemVendaParams struct {
	ID         string
	EmpresaID  string
	VendaID    string
	ProdutoID  string
	Quantidade float64
	Valor      float64
	Total      float64
}

func (q *Queries) CreateItemVenda(ctx context.Context, arg CreateItemVendaParams) error {
	_, err := q.db.ExecContext(ctx, createItemVenda,
		arg.ID,
		arg.EmpresaID,
		arg.VendaID,
		arg.ProdutoID,
		arg.Quantidade,
		arg.Valor,
		arg.Total,
	)
	return err
}

const createMaquininhaPOS = `-- name: CreateMaquininhaPOS :exec
INSERT INTO maquininhas_pos (id, id_empresa, administradora, cnpj) VALUES (?, ?, ?, ?)
`

type CreateMaquininhaPOSParams struct {
	ID             string
	IDEmpresa      string
	Administradora sql.NullString
	Cnpj           sql.NullString
}

func (q *Queries) CreateMaquininhaPOS(ctx context.Context, arg CreateMaquininhaPOSParams) error {
	_, err := q.db.ExecContext(ctx, createMaquininhaPOS,
		arg.ID,
		arg.IDEmpresa,
		arg.Administradora,
		arg.Cnpj,
	)
	return err
}

const createPagamento = `-- name: CreatePagamento :exec
INSERT INTO pagamentos (id, empresa_id, descricao, tp_pagamento, ind_pagamento, pos_exclusivo, id_pos) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreatePagamentoParams struct {
	ID           string
	EmpresaID    string
	Descricao    string
	TpPagamento  string
	IndPagamento string
	PosExclusivo bool
	IDPos        sql.NullString
}

func (q *Queries) CreatePagamento(ctx context.Context, arg CreatePagamentoParams) error {
	_, err := q.db.ExecContext(ctx, createPagamento,
		arg.ID,
		arg.EmpresaID,
		arg.Descricao,
		arg.TpPagamento,
		arg.IndPagamento,
		arg.PosExclusivo,
		arg.IDPos,
	)
	return err
}

const createPagamentoVenda = `-- name: CreatePagamentoVenda :exec
INSERT INTO pagamentos_venda (id, venda_id, pagamento_id, valor, vencimento, status) VALUES (?, ?, ?, ?, ?, ?)
`

type CreatePagamentoVendaParams struct {
	ID          string
	VendaID     string
	PagamentoID string
	Valor       float64
	Vencimento  sql.NullTime
	Status      bool
}

func (q *Queries) CreatePagamentoVenda(ctx context.Context, arg CreatePagamentoVendaParams) error {
	_, err := q.db.ExecContext(ctx, createPagamentoVenda,
		arg.ID,
		arg.VendaID,
		arg.PagamentoID,
		arg.Valor,
		arg.Vencimento,
		arg.Status,
	)
	return err
}

const createProduto = `-- name: CreateProduto :exec
INSERT INTO produtos (id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProdutoParams struct {
	ID        string
	EmpresaID string
	CodigoMc  string
	Descricao string
	CodBarras sql.NullString
	Ncm       sql.NullString
	Cest      sql.NullString
	Cbenef    sql.NullString
	Preco     float64
}

func (q *Queries) CreateProduto(ctx context.Context, arg CreateProdutoParams) error {
	_, err := q.db.ExecContext(ctx, createProduto,
		arg.ID,
		arg.EmpresaID,
		arg.CodigoMc,
		arg.Descricao,
		arg.CodBarras,
		arg.Ncm,
		arg.Cest,
		arg.Cbenef,
		arg.Preco,
	)
	return err
}

const createVenda = `-- name: CreateVenda :exec
INSERT INTO vendas (id, empresa_id, cliente_id, venda_mc, total, data, status) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateVendaParams struct {
	ID        string
	EmpresaID string
	ClienteID string
	VendaMc   string
	Total     float64
	Data      sql.NullTime
	Status    bool
}

func (q *Queries) CreateVenda(ctx context.Context, arg CreateVendaParams) error {
	_, err := q.db.ExecContext(ctx, createVenda,
		arg.ID,
		arg.EmpresaID,
		arg.ClienteID,
		arg.VendaMc,
		arg.Total,
		arg.Data,
		arg.Status,
	)
	return err
}

const deleteCidade = `-- name: DeleteCidade :exec
DELETE FROM cidades WHERE id = ?
`

func (q *Queries) DeleteCidade(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCidade, id)
	return err
}

const deleteCliente = `-- name: DeleteCliente :exec
DELETE FROM clientes WHERE id = ?
`

func (q *Queries) DeleteCliente(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCliente, id)
	return err
}

const deleteEmpresa = `-- name: DeleteEmpresa :exec
DELETE FROM empresas WHERE id = ?
`

func (q *Queries) DeleteEmpresa(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEmpresa, id)
	return err
}

const deleteEstado = `-- name: DeleteEstado :exec
DELETE FROM estados WHERE id = ?
`

func (q *Queries) DeleteEstado(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEstado, id)
	return err
}

const deleteItemVenda = `-- name: DeleteItemVenda :exec
DELETE FROM itens_venda WHERE id = ?
`

func (q *Queries) DeleteItemVenda(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteItemVenda, id)
	return err
}

const deleteItensDaVenda = `-- name: DeleteItensDaVenda :exec
DELETE FROM itens_venda WHERE venda_id = ?
`

func (q *Queries) DeleteItensDaVenda(ctx context.Context, vendaID string) error {
	_, err := q.db.ExecContext(ctx, deleteItensDaVenda, vendaID)
	return err
}

const deleteMaquininhaPOS = `-- name: DeleteMaquininhaPOS :exec
DELETE FROM maquininhas_pos WHERE id = ?
`

func (q *Queries) DeleteMaquininhaPOS(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMaquininhaPOS, id)
	return err
}

const deletePagamento = `-- name: DeletePagamento :exec
DELETE FROM pagamentos WHERE id = ?
`

func (q *Queries) DeletePagamento(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePagamento, id)
	return err
}

const deletePagamentoVenda = `-- name: DeletePagamentoVenda :exec
DELETE FROM pagamentos_venda WHERE id = ?
`

func (q *Queries) DeletePagamentoVenda(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePagamentoVenda, id)
	return err
}

const deletePagamentosDaVenda = `-- name: DeletePagamentosDaVenda :exec
DELETE FROM pagamentos_venda WHERE venda_id = ?
`

func (q *Queries) DeletePagamentosDaVenda(ctx context.Context, vendaID string) error {
	_, err := q.db.ExecContext(ctx, deletePagamentosDaVenda, vendaID)
	return err
}

const deleteProduto = `-- name: DeleteProduto :exec
DELETE FROM produtos WHERE id = ?
`

func (q *Queries) DeleteProduto(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduto, id)
	return err
}

const deleteVenda = `-- name: DeleteVenda :exec
DELETE FROM vendas WHERE id = ?
`

func (q *Queries) DeleteVenda(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVenda, id)
	return err
}

const findAll = `-- name: FindAll :many
### ITENS_VENDA ###
SELECT id, empresa_id, venda_id, produto_id, quantidade, valor, total FROM itens_venda
`

func (q *Queries) FindAll(ctx context.Context) ([]ItensVenda, error) {
	rows, err := q.db.QueryContext(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItensVenda
	for rows.Next() {
		var i ItensVenda
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.VendaID,
			&i.ProdutoID,
			&i.Quantidade,
			&i.Valor,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCidade = `-- name: GetCidade :one
### CIDADES ###
SELECT id, descricao, estado_id, cod_ibge FROM cidades WHERE id = ?
`

func (q *Queries) GetCidade(ctx context.Context, id string) (Cidade, error) {
	row := q.db.QueryRowContext(ctx, getCidade, id)
	var i Cidade
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.EstadoID,
		&i.CodIbge,
	)
	return i, err
}

const getCidadeByIBGE = `-- name: GetCidadeByIBGE :one
SELECT id, descricao, estado_id, cod_ibge FROM cidades WHERE cod_ibge = ?
`

func (q *Queries) GetCidadeByIBGE(ctx context.Context, codIbge string) (Cidade, error) {
	row := q.db.QueryRowContext(ctx, getCidadeByIBGE, codIbge)
	var i Cidade
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.EstadoID,
		&i.CodIbge,
	)
	return i, err
}

const getCidadeByIbgeUF = `-- name: GetCidadeByIbgeUF :many
SELECT cidades.id, cidades.descricao, estado_id, cidades.cod_ibge, estados.id, estados.descricao, uf, estados.cod_ibge FROM cidades LEFT JOIN ESTADOS ON cidades.estado_id = ESTADOS.id WHERE ESTADOS.cod_ibge = ?
`

type GetCidadeByIbgeUFRow struct {
	ID          string
	Descricao   string
	EstadoID    string
	CodIbge     string
	ID_2        sql.NullString
	Descricao_2 sql.NullString
	Uf          sql.NullString
	CodIbge_2   sql.NullInt32
}

func (q *Queries) GetCidadeByIbgeUF(ctx context.Context, codIbge int32) ([]GetCidadeByIbgeUFRow, error) {
	rows, err := q.db.QueryContext(ctx, getCidadeByIbgeUF, codIbge)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCidadeByIbgeUFRow
	for rows.Next() {
		var i GetCidadeByIbgeUFRow
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.EstadoID,
			&i.CodIbge,
			&i.ID_2,
			&i.Descricao_2,
			&i.Uf,
			&i.CodIbge_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCidadeByUF = `-- name: GetCidadeByUF :many
SELECT cidades.id, cidades.descricao, estado_id, cidades.cod_ibge, estados.id, estados.descricao, uf, estados.cod_ibge FROM cidades LEFT JOIN ESTADOS ON cidades.estado_id = ESTADOS.id WHERE ESTADOS.uf = ?
`

type GetCidadeByUFRow struct {
	ID          string
	Descricao   string
	EstadoID    string
	CodIbge     string
	ID_2        sql.NullString
	Descricao_2 sql.NullString
	Uf          sql.NullString
	CodIbge_2   sql.NullInt32
}

func (q *Queries) GetCidadeByUF(ctx context.Context, uf string) ([]GetCidadeByUFRow, error) {
	rows, err := q.db.QueryContext(ctx, getCidadeByUF, uf)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCidadeByUFRow
	for rows.Next() {
		var i GetCidadeByUFRow
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.EstadoID,
			&i.CodIbge,
			&i.ID_2,
			&i.Descricao_2,
			&i.Uf,
			&i.CodIbge_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCliente = `-- name: GetCliente :one
### CLIENTES ###
SELECT id, codigo_mc, empresa_id, nome, cep, cidade_id, endereco, numero, complemento FROM clientes WHERE id = ?
`

func (q *Queries) GetCliente(ctx context.Context, id string) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getCliente, id)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.CodigoMc,
		&i.EmpresaID,
		&i.Nome,
		&i.Cep,
		&i.CidadeID,
		&i.Endereco,
		&i.Numero,
		&i.Complemento,
	)
	return i, err
}

const getClienteByCodigoMC = `-- name: GetClienteByCodigoMC :one
SELECT id, codigo_mc, empresa_id, nome, cep, cidade_id, endereco, numero, complemento FROM clientes WHERE codigo_mc = ?
`

func (q *Queries) GetClienteByCodigoMC(ctx context.Context, codigoMc int64) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getClienteByCodigoMC, codigoMc)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.CodigoMc,
		&i.EmpresaID,
		&i.Nome,
		&i.Cep,
		&i.CidadeID,
		&i.Endereco,
		&i.Numero,
		&i.Complemento,
	)
	return i, err
}

const getClienteByEmpresa = `-- name: GetClienteByEmpresa :many
SELECT id, codigo_mc, empresa_id, nome, cep, cidade_id, endereco, numero, complemento FROM clientes WHERE empresa_id = ?
`

func (q *Queries) GetClienteByEmpresa(ctx context.Context, empresaID string) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, getClienteByEmpresa, empresaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.ID,
			&i.CodigoMc,
			&i.EmpresaID,
			&i.Nome,
			&i.Cep,
			&i.CidadeID,
			&i.Endereco,
			&i.Numero,
			&i.Complemento,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmpresa = `-- name: GetEmpresa :one
### EMPRESAS ###
SELECT id, descricao, cnpj, chave_registro FROM empresas WHERE id = ?
`

func (q *Queries) GetEmpresa(ctx context.Context, id string) (Empresa, error) {
	row := q.db.QueryRowContext(ctx, getEmpresa, id)
	var i Empresa
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Cnpj,
		&i.ChaveRegistro,
	)
	return i, err
}

const getEmpresaByCNPJ = `-- name: GetEmpresaByCNPJ :one
SELECT id, descricao, cnpj, chave_registro FROM empresas WHERE cnpj = ?
`

func (q *Queries) GetEmpresaByCNPJ(ctx context.Context, cnpj sql.NullString) (Empresa, error) {
	row := q.db.QueryRowContext(ctx, getEmpresaByCNPJ, cnpj)
	var i Empresa
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Cnpj,
		&i.ChaveRegistro,
	)
	return i, err
}

const getEmpresaByChaveRegistro = `-- name: GetEmpresaByChaveRegistro :one
SELECT id, descricao, cnpj, chave_registro FROM empresas WHERE chave_registro = ?
`

func (q *Queries) GetEmpresaByChaveRegistro(ctx context.Context, chaveRegistro sql.NullString) (Empresa, error) {
	row := q.db.QueryRowContext(ctx, getEmpresaByChaveRegistro, chaveRegistro)
	var i Empresa
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Cnpj,
		&i.ChaveRegistro,
	)
	return i, err
}

const getEstado = `-- name: GetEstado :one
### ESTADOS ###
SELECT id, descricao, uf, cod_ibge FROM estados WHERE id = ?
`

func (q *Queries) GetEstado(ctx context.Context, id string) (Estado, error) {
	row := q.db.QueryRowContext(ctx, getEstado, id)
	var i Estado
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Uf,
		&i.CodIbge,
	)
	return i, err
}

const getEstadoByCodIBGE = `-- name: GetEstadoByCodIBGE :one
SELECT id, descricao, uf, cod_ibge FROM estados WHERE cod_ibge = ?
`

func (q *Queries) GetEstadoByCodIBGE(ctx context.Context, codIbge int32) (Estado, error) {
	row := q.db.QueryRowContext(ctx, getEstadoByCodIBGE, codIbge)
	var i Estado
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Uf,
		&i.CodIbge,
	)
	return i, err
}

const getEstadoByUF = `-- name: GetEstadoByUF :one
SELECT id, descricao, uf, cod_ibge FROM estados WHERE uf = ?
`

func (q *Queries) GetEstadoByUF(ctx context.Context, uf string) (Estado, error) {
	row := q.db.QueryRowContext(ctx, getEstadoByUF, uf)
	var i Estado
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.Uf,
		&i.CodIbge,
	)
	return i, err
}

const getItemVenda = `-- name: GetItemVenda :one
SELECT id, empresa_id, venda_id, produto_id, quantidade, valor, total FROM itens_venda WHERE id = ?
`

func (q *Queries) GetItemVenda(ctx context.Context, id string) (ItensVenda, error) {
	row := q.db.QueryRowContext(ctx, getItemVenda, id)
	var i ItensVenda
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.VendaID,
		&i.ProdutoID,
		&i.Quantidade,
		&i.Valor,
		&i.Total,
	)
	return i, err
}

const getItensVenda = `-- name: GetItensVenda :many
SELECT id, empresa_id, venda_id, produto_id, quantidade, valor, total FROM itens_venda WHERE venda_id = ?
`

func (q *Queries) GetItensVenda(ctx context.Context, vendaID string) ([]ItensVenda, error) {
	rows, err := q.db.QueryContext(ctx, getItensVenda, vendaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItensVenda
	for rows.Next() {
		var i ItensVenda
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.VendaID,
			&i.ProdutoID,
			&i.Quantidade,
			&i.Valor,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaquininhasPOS = `-- name: GetMaquininhasPOS :one
### MAQUININHA_POS ###
SELECT id, id_empresa, administradora, cnpj FROM maquininhas_pos WHERE id = ?
`

func (q *Queries) GetMaquininhasPOS(ctx context.Context, id string) (MaquininhasPo, error) {
	row := q.db.QueryRowContext(ctx, getMaquininhasPOS, id)
	var i MaquininhasPo
	err := row.Scan(
		&i.ID,
		&i.IDEmpresa,
		&i.Administradora,
		&i.Cnpj,
	)
	return i, err
}

const getMaquininhasPosByEmpresa = `-- name: GetMaquininhasPosByEmpresa :many
SELECT id, id_empresa, administradora, cnpj FROM maquininhas_pos WHERE id_empresa = ?
`

func (q *Queries) GetMaquininhasPosByEmpresa(ctx context.Context, idEmpresa string) ([]MaquininhasPo, error) {
	rows, err := q.db.QueryContext(ctx, getMaquininhasPosByEmpresa, idEmpresa)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaquininhasPo
	for rows.Next() {
		var i MaquininhasPo
		if err := rows.Scan(
			&i.ID,
			&i.IDEmpresa,
			&i.Administradora,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagamento = `-- name: GetPagamento :one
### PAGAMENTOS ###
SELECT id, empresa_id, descricao, tp_pagamento, ind_pagamento, pos_exclusivo, id_pos FROM pagamentos WHERE id = ?
`

func (q *Queries) GetPagamento(ctx context.Context, id string) (Pagamento, error) {
	row := q.db.QueryRowContext(ctx, getPagamento, id)
	var i Pagamento
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.Descricao,
		&i.TpPagamento,
		&i.IndPagamento,
		&i.PosExclusivo,
		&i.IDPos,
	)
	return i, err
}

const getPagamentoByEmpresaID = `-- name: GetPagamentoByEmpresaID :many
SELECT id, empresa_id, descricao, tp_pagamento, ind_pagamento, pos_exclusivo, id_pos FROM pagamentos  WHERE empresa_id = ?
`

func (q *Queries) GetPagamentoByEmpresaID(ctx context.Context, empresaID string) ([]Pagamento, error) {
	rows, err := q.db.QueryContext(ctx, getPagamentoByEmpresaID, empresaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pagamento
	for rows.Next() {
		var i Pagamento
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.Descricao,
			&i.TpPagamento,
			&i.IndPagamento,
			&i.PosExclusivo,
			&i.IDPos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagamentoVenda = `-- name: GetPagamentoVenda :one
### PAGAMENTOS_VENDA ###
SELECT id, venda_id, pagamento_id, valor, vencimento, status FROM pagamentos_venda WHERE id = ?
`

func (q *Queries) GetPagamentoVenda(ctx context.Context, id string) (PagamentosVenda, error) {
	row := q.db.QueryRowContext(ctx, getPagamentoVenda, id)
	var i PagamentosVenda
	err := row.Scan(
		&i.ID,
		&i.VendaID,
		&i.PagamentoID,
		&i.Valor,
		&i.Vencimento,
		&i.Status,
	)
	return i, err
}

const getPagamentoVendaByStatus = `-- name: GetPagamentoVendaByStatus :many
SELECT id, venda_id, pagamento_id, valor, vencimento, status FROM pagamentos_venda WHERE status = ?
`

func (q *Queries) GetPagamentoVendaByStatus(ctx context.Context, status bool) ([]PagamentosVenda, error) {
	rows, err := q.db.QueryContext(ctx, getPagamentoVendaByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PagamentosVenda
	for rows.Next() {
		var i PagamentosVenda
		if err := rows.Scan(
			&i.ID,
			&i.VendaID,
			&i.PagamentoID,
			&i.Valor,
			&i.Vencimento,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagamentoVendaByVendaID = `-- name: GetPagamentoVendaByVendaID :many
SELECT id, venda_id, pagamento_id, valor, vencimento, status FROM pagamentos_venda WHERE venda_id = ?
`

func (q *Queries) GetPagamentoVendaByVendaID(ctx context.Context, vendaID string) ([]PagamentosVenda, error) {
	rows, err := q.db.QueryContext(ctx, getPagamentoVendaByVendaID, vendaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PagamentosVenda
	for rows.Next() {
		var i PagamentosVenda
		if err := rows.Scan(
			&i.ID,
			&i.VendaID,
			&i.PagamentoID,
			&i.Valor,
			&i.Vencimento,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduto = `-- name: GetProduto :one
### PRODUTOS ###
SELECT id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco FROM produtos WHERE id = ?
`

func (q *Queries) GetProduto(ctx context.Context, id string) (Produto, error) {
	row := q.db.QueryRowContext(ctx, getProduto, id)
	var i Produto
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.CodigoMc,
		&i.Descricao,
		&i.CodBarras,
		&i.Ncm,
		&i.Cest,
		&i.Cbenef,
		&i.Preco,
	)
	return i, err
}

const getProdutoByCodBarras = `-- name: GetProdutoByCodBarras :one
SELECT id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco FROM produtos WHERE cod_barras = ?
`

func (q *Queries) GetProdutoByCodBarras(ctx context.Context, codBarras sql.NullString) (Produto, error) {
	row := q.db.QueryRowContext(ctx, getProdutoByCodBarras, codBarras)
	var i Produto
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.CodigoMc,
		&i.Descricao,
		&i.CodBarras,
		&i.Ncm,
		&i.Cest,
		&i.Cbenef,
		&i.Preco,
	)
	return i, err
}

const getProdutoByCodigoMC = `-- name: GetProdutoByCodigoMC :one
SELECT id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco FROM produtos WHERE codigo_mc = ?
`

func (q *Queries) GetProdutoByCodigoMC(ctx context.Context, codigoMc string) (Produto, error) {
	row := q.db.QueryRowContext(ctx, getProdutoByCodigoMC, codigoMc)
	var i Produto
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.CodigoMc,
		&i.Descricao,
		&i.CodBarras,
		&i.Ncm,
		&i.Cest,
		&i.Cbenef,
		&i.Preco,
	)
	return i, err
}

const getProdutoByEmpresa = `-- name: GetProdutoByEmpresa :many
SELECT id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco FROM produtos WHERE empresa_id = ?
`

func (q *Queries) GetProdutoByEmpresa(ctx context.Context, empresaID string) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, getProdutoByEmpresa, empresaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.CodigoMc,
			&i.Descricao,
			&i.CodBarras,
			&i.Ncm,
			&i.Cest,
			&i.Cbenef,
			&i.Preco,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVenda = `-- name: GetVenda :one
### VENDAS ###
SELECT id, empresa_id, cliente_id, venda_mc, total, data, status FROM vendas WHERE id = ?
`

func (q *Queries) GetVenda(ctx context.Context, id string) (Venda, error) {
	row := q.db.QueryRowContext(ctx, getVenda, id)
	var i Venda
	err := row.Scan(
		&i.ID,
		&i.EmpresaID,
		&i.ClienteID,
		&i.VendaMc,
		&i.Total,
		&i.Data,
		&i.Status,
	)
	return i, err
}

const getVendaByEmpresa = `-- name: GetVendaByEmpresa :many
SELECT id, empresa_id, cliente_id, venda_mc, total, data, status FROM vendas WHERE empresa_id = ?
`

func (q *Queries) GetVendaByEmpresa(ctx context.Context, empresaID string) ([]Venda, error) {
	rows, err := q.db.QueryContext(ctx, getVendaByEmpresa, empresaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Venda
	for rows.Next() {
		var i Venda
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.ClienteID,
			&i.VendaMc,
			&i.Total,
			&i.Data,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVendaByStatus = `-- name: GetVendaByStatus :many
SELECT id, empresa_id, cliente_id, venda_mc, total, data, status FROM vendas WHERE status = ?
`

func (q *Queries) GetVendaByStatus(ctx context.Context, status bool) ([]Venda, error) {
	rows, err := q.db.QueryContext(ctx, getVendaByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Venda
	for rows.Next() {
		var i Venda
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.ClienteID,
			&i.VendaMc,
			&i.Total,
			&i.Data,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCidades = `-- name: ListCidades :many
SELECT id, descricao, estado_id, cod_ibge FROM cidades
`

func (q *Queries) ListCidades(ctx context.Context) ([]Cidade, error) {
	rows, err := q.db.QueryContext(ctx, listCidades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cidade
	for rows.Next() {
		var i Cidade
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.EstadoID,
			&i.CodIbge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientes = `-- name: ListClientes :many
SELECT id, codigo_mc, empresa_id, nome, cep, cidade_id, endereco, numero, complemento FROM clientes
`

func (q *Queries) ListClientes(ctx context.Context) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, listClientes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.ID,
			&i.CodigoMc,
			&i.EmpresaID,
			&i.Nome,
			&i.Cep,
			&i.CidadeID,
			&i.Endereco,
			&i.Numero,
			&i.Complemento,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmpresas = `-- name: ListEmpresas :many
SELECT id, descricao, cnpj, chave_registro FROM empresas
`

func (q *Queries) ListEmpresas(ctx context.Context) ([]Empresa, error) {
	rows, err := q.db.QueryContext(ctx, listEmpresas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Empresa
	for rows.Next() {
		var i Empresa
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.Cnpj,
			&i.ChaveRegistro,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEstados = `-- name: ListEstados :many
SELECT id, descricao, uf, cod_ibge FROM estados
`

func (q *Queries) ListEstados(ctx context.Context) ([]Estado, error) {
	rows, err := q.db.QueryContext(ctx, listEstados)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Estado
	for rows.Next() {
		var i Estado
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.Uf,
			&i.CodIbge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaquininhaPOS = `-- name: ListMaquininhaPOS :many
SELECT id, id_empresa, administradora, cnpj FROM maquininhas_pos
`

func (q *Queries) ListMaquininhaPOS(ctx context.Context) ([]MaquininhasPo, error) {
	rows, err := q.db.QueryContext(ctx, listMaquininhaPOS)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaquininhasPo
	for rows.Next() {
		var i MaquininhasPo
		if err := rows.Scan(
			&i.ID,
			&i.IDEmpresa,
			&i.Administradora,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPagamentoVenda = `-- name: ListPagamentoVenda :many
SELECT id, venda_id, pagamento_id, valor, vencimento, status FROM pagamentos_venda
`

func (q *Queries) ListPagamentoVenda(ctx context.Context) ([]PagamentosVenda, error) {
	rows, err := q.db.QueryContext(ctx, listPagamentoVenda)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PagamentosVenda
	for rows.Next() {
		var i PagamentosVenda
		if err := rows.Scan(
			&i.ID,
			&i.VendaID,
			&i.PagamentoID,
			&i.Valor,
			&i.Vencimento,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPagamentos = `-- name: ListPagamentos :many
SELECT id, empresa_id, descricao, tp_pagamento, ind_pagamento, pos_exclusivo, id_pos FROM pagamentos
`

func (q *Queries) ListPagamentos(ctx context.Context) ([]Pagamento, error) {
	rows, err := q.db.QueryContext(ctx, listPagamentos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pagamento
	for rows.Next() {
		var i Pagamento
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.Descricao,
			&i.TpPagamento,
			&i.IndPagamento,
			&i.PosExclusivo,
			&i.IDPos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProdutos = `-- name: ListProdutos :many
SELECT id, empresa_id, codigo_mc, descricao, cod_barras, ncm, cest, cbenef, preco FROM produtos
`

func (q *Queries) ListProdutos(ctx context.Context) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, listProdutos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.CodigoMc,
			&i.Descricao,
			&i.CodBarras,
			&i.Ncm,
			&i.Cest,
			&i.Cbenef,
			&i.Preco,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVendas = `-- name: ListVendas :many
SELECT id, empresa_id, cliente_id, venda_mc, total, data, status FROM vendas
`

func (q *Queries) ListVendas(ctx context.Context) ([]Venda, error) {
	rows, err := q.db.QueryContext(ctx, listVendas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Venda
	for rows.Next() {
		var i Venda
		if err := rows.Scan(
			&i.ID,
			&i.EmpresaID,
			&i.ClienteID,
			&i.VendaMc,
			&i.Total,
			&i.Data,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCidade = `-- name: UpdateCidade :exec
UPDATE cidades SET descricao=?, estado_id=?, cod_ibge=? WHERE id=?
`

type UpdateCidadeParams struct {
	Descricao string
	EstadoID  string
	CodIbge   string
	ID        string
}

func (q *Queries) UpdateCidade(ctx context.Context, arg UpdateCidadeParams) error {
	_, err := q.db.ExecContext(ctx, updateCidade,
		arg.Descricao,
		arg.EstadoID,
		arg.CodIbge,
		arg.ID,
	)
	return err
}

const updateCliente = `-- name: UpdateCliente :exec
UPDATE clientes SET codigo_mc=?, empresa_id=?, nome=?, cep=?, cidade_id=?, endereco=?, numero=?, complemento=? WHERE id=?
`

type UpdateClienteParams struct {
	CodigoMc    int64
	EmpresaID   string
	Nome        string
	Cep         sql.NullString
	CidadeID    sql.NullString
	Endereco    sql.NullString
	Numero      sql.NullString
	Complemento sql.NullString
	ID          string
}

func (q *Queries) UpdateCliente(ctx context.Context, arg UpdateClienteParams) error {
	_, err := q.db.ExecContext(ctx, updateCliente,
		arg.CodigoMc,
		arg.EmpresaID,
		arg.Nome,
		arg.Cep,
		arg.CidadeID,
		arg.Endereco,
		arg.Numero,
		arg.Complemento,
		arg.ID,
	)
	return err
}

const updateEmpresa = `-- name: UpdateEmpresa :exec
UPDATE empresas SET descricao=?, cnpj=?, chave_registro=? WHERE id=?
`

type UpdateEmpresaParams struct {
	Descricao     string
	Cnpj          sql.NullString
	ChaveRegistro sql.NullString
	ID            string
}

func (q *Queries) UpdateEmpresa(ctx context.Context, arg UpdateEmpresaParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpresa,
		arg.Descricao,
		arg.Cnpj,
		arg.ChaveRegistro,
		arg.ID,
	)
	return err
}

const updateEstado = `-- name: UpdateEstado :exec
UPDATE estados SET descricao=?, uf=?, cod_ibge=? WHERE id=?
`

type UpdateEstadoParams struct {
	Descricao string
	Uf        string
	CodIbge   int32
	ID        string
}

func (q *Queries) UpdateEstado(ctx context.Context, arg UpdateEstadoParams) error {
	_, err := q.db.ExecContext(ctx, updateEstado,
		arg.Descricao,
		arg.Uf,
		arg.CodIbge,
		arg.ID,
	)
	return err
}

const updateItemVenda = `-- name: UpdateItemVenda :exec
UPDATE itens_venda SET venda_id=?, empresa_id=?, produto_id=?, quantidade=?, valor=?, total=? WHERE id=?
`

type UpdateItemVendaParams struct {
	VendaID    string
	EmpresaID  string
	ProdutoID  string
	Quantidade float64
	Valor      float64
	Total      float64
	ID         string
}

func (q *Queries) UpdateItemVenda(ctx context.Context, arg UpdateItemVendaParams) error {
	_, err := q.db.ExecContext(ctx, updateItemVenda,
		arg.VendaID,
		arg.EmpresaID,
		arg.ProdutoID,
		arg.Quantidade,
		arg.Valor,
		arg.Total,
		arg.ID,
	)
	return err
}

const updateMaquininhaPOS = `-- name: UpdateMaquininhaPOS :exec
UPDATE maquininhas_pos SET id_empresa=?, administradora=?, cnpj=? WHERE id=?
`

type UpdateMaquininhaPOSParams struct {
	IDEmpresa      string
	Administradora sql.NullString
	Cnpj           sql.NullString
	ID             string
}

func (q *Queries) UpdateMaquininhaPOS(ctx context.Context, arg UpdateMaquininhaPOSParams) error {
	_, err := q.db.ExecContext(ctx, updateMaquininhaPOS,
		arg.IDEmpresa,
		arg.Administradora,
		arg.Cnpj,
		arg.ID,
	)
	return err
}

const updatePagamento = `-- name: UpdatePagamento :exec
UPDATE pagamentos SET empresa_id=?, descricao=?, tp_pagamento=?, ind_pagamento=?, pos_exclusivo=?, id_pos=? WHERE id=?
`

type UpdatePagamentoParams struct {
	EmpresaID    string
	Descricao    string
	TpPagamento  string
	IndPagamento string
	PosExclusivo bool
	IDPos        sql.NullString
	ID           string
}

func (q *Queries) UpdatePagamento(ctx context.Context, arg UpdatePagamentoParams) error {
	_, err := q.db.ExecContext(ctx, updatePagamento,
		arg.EmpresaID,
		arg.Descricao,
		arg.TpPagamento,
		arg.IndPagamento,
		arg.PosExclusivo,
		arg.IDPos,
		arg.ID,
	)
	return err
}

const updatePagamentoVenda = `-- name: UpdatePagamentoVenda :exec
UPDATE pagamentos_venda SET venda_id=?, pagamento_id=?, valor=?, vencimento=?, status=? WHERE id=?
`

type UpdatePagamentoVendaParams struct {
	VendaID     string
	PagamentoID string
	Valor       float64
	Vencimento  sql.NullTime
	Status      bool
	ID          string
}

func (q *Queries) UpdatePagamentoVenda(ctx context.Context, arg UpdatePagamentoVendaParams) error {
	_, err := q.db.ExecContext(ctx, updatePagamentoVenda,
		arg.VendaID,
		arg.PagamentoID,
		arg.Valor,
		arg.Vencimento,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateProduto = `-- name: UpdateProduto :exec
UPDATE produtos SET empresa_id=?, codigo_mc=?, descricao=?, cod_barras=?, ncm=?, cest=?, cbenef=?, preco=? WHERE id=?
`

type UpdateProdutoParams struct {
	EmpresaID string
	CodigoMc  string
	Descricao string
	CodBarras sql.NullString
	Ncm       sql.NullString
	Cest      sql.NullString
	Cbenef    sql.NullString
	Preco     float64
	ID        string
}

func (q *Queries) UpdateProduto(ctx context.Context, arg UpdateProdutoParams) error {
	_, err := q.db.ExecContext(ctx, updateProduto,
		arg.EmpresaID,
		arg.CodigoMc,
		arg.Descricao,
		arg.CodBarras,
		arg.Ncm,
		arg.Cest,
		arg.Cbenef,
		arg.Preco,
		arg.ID,
	)
	return err
}

const updateVenda = `-- name: UpdateVenda :exec
UPDATE vendas SET empresa_id=?, cliente_id=?, venda_mc=?, total=?, data=?, status=? WHERE id=?
`

type UpdateVendaParams struct {
	EmpresaID string
	ClienteID string
	VendaMc   string
	Total     float64
	Data      sql.NullTime
	Status    bool
	ID        string
}

func (q *Queries) UpdateVenda(ctx context.Context, arg UpdateVendaParams) error {
	_, err := q.db.ExecContext(ctx, updateVenda,
		arg.EmpresaID,
		arg.ClienteID,
		arg.VendaMc,
		arg.Total,
		arg.Data,
		arg.Status,
		arg.ID,
	)
	return err
}
